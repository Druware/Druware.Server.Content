// <auto-generated />
using System;
using Druware.Server.Content;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Druware.Server.Content.Migrations.Sqlite
{
    [DbContext(typeof(ContentContextSqlite))]
    [Migration("20241028174021_Startup")]
    partial class Startup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("Druware.Server.Content.Asset", b =>
                {
                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("asset_id");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB")
                        .HasColumnName("content");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .HasMaxLength(192)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_name");

                    b.Property<string>("MediaType")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("media_type");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.HasKey("AssetId");

                    b.HasIndex("TypeId");

                    b.ToTable("asset", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.Article", b =>
                {
                    b.Property<Guid?>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("article_id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("body");

                    b.Property<string>("ByLine")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("by_line");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime")
                        .HasColumnName("expires");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Permalink")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("permalink");

                    b.Property<bool>("Pinned")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pinned");

                    b.Property<DateTime?>("Posted")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("posted")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("ArticleId");

                    b.HasIndex("Permalink")
                        .IsUnique();

                    b.ToTable("article", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.ArticleTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("article_id");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("article_tag_pkey");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TagId");

                    b.ToTable("article_tag", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.AssetType", b =>
                {
                    b.Property<int?>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.HasKey("TypeId")
                        .HasName("asset_type_pkey");

                    b.ToTable("asset_type", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.Document", b =>
                {
                    b.Property<Guid?>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("document_id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT")
                        .HasColumnName("body");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Permalink")
                        .HasColumnType("varchar(278)")
                        .HasColumnName("permalink");

                    b.Property<DateTime?>("Posted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("posted")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("DocumentId");

                    b.HasIndex("Permalink")
                        .IsUnique();

                    b.ToTable("document", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.DocumentTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("document_id");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("document_tag_pkey");

                    b.HasIndex("DocumentId");

                    b.HasIndex("TagId");

                    b.ToTable("document_tag", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.Product", b =>
                {
                    b.Property<long?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("DocumentationUrl")
                        .HasMaxLength(278)
                        .HasColumnType("TEXT")
                        .HasColumnName("documentation_url");

                    b.Property<string>("DownloadUrl")
                        .HasMaxLength(278)
                        .HasColumnType("TEXT")
                        .HasColumnName("download_url");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(278)
                        .HasColumnType("TEXT")
                        .HasColumnName("icon_url");

                    b.Property<string>("License")
                        .HasColumnType("TEXT")
                        .HasColumnName("license");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Short")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("short");

                    b.Property<string>("Summary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("summary");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("updated")
                        .HasDefaultValueSql("date('now')");

                    b.HasKey("ProductId");

                    b.HasIndex("Short")
                        .IsUnique();

                    b.ToTable("product", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.ProductRelease", b =>
                {
                    b.Property<long?>("ReleaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("release_id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT")
                        .HasColumnName("body");

                    b.Property<string>("DownloadUrl")
                        .HasMaxLength(278)
                        .HasColumnType("TEXT")
                        .HasColumnName("download_url");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("Date('now')");

                    b.Property<DateTime?>("Posted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("posted")
                        .HasDefaultValueSql("Date('now')");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("ReleaseId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_release", "content");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.ProductTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("product_tag_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("product_tag", "content");
                });

            modelBuilder.Entity("Druware.Server.Entities.Tag", b =>
                {
                    b.Property<long?>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_id");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("Druware.Server.Content.Asset", b =>
                {
                    b.HasOne("Druware.Server.Content.Entities.AssetType", "Type")
                        .WithMany("Assets")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("fk_content_asset_type_id__content_asset_type_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.ArticleTag", b =>
                {
                    b.HasOne("Druware.Server.Content.Entities.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_articletags_articleid__article_articleid");

                    b.HasOne("Druware.Server.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.DocumentTag", b =>
                {
                    b.HasOne("Druware.Server.Content.Entities.Document", "Document")
                        .WithMany("DocumentTags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_documenttags_documentid__document_documentid");

                    b.HasOne("Druware.Server.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.ProductRelease", b =>
                {
                    b.HasOne("Druware.Server.Content.Entities.Product", "Product")
                        .WithMany("History")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_content_product_release_product_id__content_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.ProductTag", b =>
                {
                    b.HasOne("Druware.Server.Content.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_producttags_productid__product_productid");

                    b.HasOne("Druware.Server.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.Article", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.Document", b =>
                {
                    b.Navigation("DocumentTags");
                });

            modelBuilder.Entity("Druware.Server.Content.Entities.Product", b =>
                {
                    b.Navigation("History");

                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
